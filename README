Update Log:

  Version 0.2.9 released to https://rubygems.org/gems/egregious on 10.23.2015
        Added support for exceptions that define a http_status. The exception map can override this.
        This is a good way to allow a raise to specify a http_status using a custom exception.
        The idea for this came from the Stripe::Error exception classes.
        You can now use: raise Egregious::Error.new("My very bad error", :payment_required)  or
        define your own exceptions that implement http_status

        Also updated Gemfile.lock to ruby 2.2.1 and latest dependencies. This is for specs only.

  Version 0.2.8 released to https://rubygems.org/gems/egregious on 6.5.2015
        Added Airbrake notifications. If this is too chatty, you can configure it by overriding: notify_airbrake

  Version 0.2.7 released to https://rubygems.org/gems/egregious on 5.28.2015
        Merged pull request:
        Compatibility with Rails 4.2 #13

  Version 0.2.6 released to https://rubygems.org/gems/egregious on 7.22.2014
        Merged pull request:
          Rails 4 support (#11,#12)

  Version 0.2.4 released to https://rubygems.org/gems/egregious on 7.23.2013
        Added MIT License

  Version 0.2.3 released to https://rubygems.org/gems/egregious on 7.23.2013
        Merged pull requests:
          Mongoid integration (#6)
        Bug Fix: Bad Rails test
        Updated rails and rack dependencies

  Version 0.2.2 released to https://rubygems.org/gems/egregious on 2.15.2013
      Merged pull requests:
        Compatibility with Rails::API (#5)

  Version 0.2.1 released to https://rubygems.org/gems/egregious on 9.21.2012
    Merged pull requests:
      Bug Fix: should translate status code Symbol to right HTTP STATUS CODE -  avinasha
      Fixes teapot bug with rails 3.2.8. -  kbrown 
      Note: version 0.2.0 does not work with rails 3.2.8 you should update to 0.2.1

If you would like to contribute take a look at the issues feature list, fork and issue a pull request!

An earlier version of these instructions with some formatting can be found @ http://railsindirection.blogspot.com/2011/09/rails-exception-handling-egregious.html

Egregious is a rails based exception handling gem for well defined http exception handling for json, xml and html.

If you have a json or xml api into your rails application, you probably have added your own exception handling to map
exceptions to a http status and formatting your json and xml output.  We decided to create egregious. One of the goals
is to start providing a more consistent api error experience for all rails applications. As of the creation of
egregious the behavior of rails was to return html when an exception is thrown with the status code of 500.  With
egregious proper json and html of the error will be returned with a good default mapping of exceptions to http status
codes.  This allows api developers to respond to the status code properly, instead of scratching their head with 500's
coming back all the time. If the problem was the api caller then the result codes are in the 300 range. If the problem
was on the server then the status codes are in the 500 range.  The returned exception message and exception type
provide the caller context information.

 What egregious can do:

 * Defines default exception handling for most common ruby, rails, warden, cancan and mongoid exceptions.
   (warden, cancan and mongoid are optional)
 * Catches defined exceptions using a rescue_with returning the status code defined for each exception
   and well structured json, xml
 * For html production requests attempts to load the html error pages for the mapped status code,
   falling back to the 500.html page.
 * Defines exceptions for all http status codes allowing you to throw these exceptions anywhere in your code.
 * Allows you to change the exception mapping to fit your needs, adding exceptions and changing status mapping.
 * If Hoptoad is defined it will send the errors to Hoptoad/Airbrake.
 * The error will be logged with stack trace


REQUIRES:
  rails ~> 3.1.12
  rack  >= 1.3.6

USAGE:
1) Add to your Gemfile:
gem 'egregious'

2) In your ApplicationController add:
include Egregious

Optionally, to configure create an initializer and add:

Egregious.exception_codes.merge!({NameError => :bad_request})

This will either add a new mapping or replace the existing mapping to a new status code.
You can pass the status code as a symbol, integer or string.

In your code if you want to send an error back just throw an exception. For example:

raise Egregious::BadRequest.new("You can not created an order without a customer.") unless customer_id

All the http status codes have exception classes named after them in the Egregious module. You can throw any exception,
or define your own exceptions. You can find a list in the Rack::Utils::HTTP_STATUS_CODES class.

If you want to change the behavior then you can override the following methods in your ApplicationController.

# override this if you want your flash to behave differently
def egregious_flash(exception)
    flash.now[:alert] = exception.message
end

# override this if you want your logging to behave differently
def egregious_log(exception)
    logger.fatal(
        "\n\n" + exception.class.to_s + ' (' + exception.message.to_s + '):\n    ' +
            clean_backtrace(exception).join("\n    ") +
            "\n\n")
    HoptoadNotifier.notify(exception) if defined?(HoptoadNotifier)
end

# override this if you want to change your respond_to behavior
def egregious_respond_to(exception)
    respond_to do |format|
          status = status_code_for_exception(exception)
          format.xml { render :xml=> exception.to_xml, :status => status }
          format.json { render :json=> exception.to_json, :status => status }
          # render the html page for the status we are returning it exists...if not then render the 500.html page.
          format.html { render :file => File.exists?(build_html_file_path(status)) ?
                                          build_html_file_path(status) : build_html_file_path('500')}
    end
end



# override this if you want to change what html static file gets returned.
def build_html_file_path(status)
    File.expand_path(Rails.root, 'public', status + '.html')
end

# override this if you want to control what gets sent to airbrake
# optionally you can configure the airbrake ignore list
def notify_airbrake(exception)
    # for ancient clients - can probably remove
    HoptoadNotifier.notify(exception) if defined?(HoptoadNotifier)
    # tested with airbrake 3.1.15 and 4.2.1
    env['airbrake.error_id'] = Airbrake.notify_or_ignore(exception) if defined?(Airbrake)
end

KNOWN ISSUES:
* If you use Mongoid, CanCan or Devise you must have Egregious after CanCan/Devise in your Gemfile, if not it will not handle those errors correctly.
